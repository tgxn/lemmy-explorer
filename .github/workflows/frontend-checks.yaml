name: frontend-checks

on:
  pull_request:
    paths:
      - .github/workflows/frontend-checks.yaml
      - frontend/**
      - types/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NODE_VERSION: 22.17.0

jobs:
  frontend-checks-style:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Yarn Install ./frontend
      - name: Yarn Install ./frontend
        uses: ./.github/actions/yarn-install
        with:
          working-directory: ./frontend

      - name: Check Style | Frontend
        run: yarn format:check
        working-directory: ./frontend

  frontend-checks-types:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Yarn Install ./frontend
      - name: Yarn Install ./frontend
        uses: ./.github/actions/yarn-install
        with:
          working-directory: ./frontend

      - name: Check Types | Frontend
        run: yarn check:ts
        working-directory: ./frontend

  frontend-checks-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Yarn Install ./frontend
      - name: Yarn Install ./frontend
        uses: ./.github/actions/yarn-install
        with:
          working-directory: ./frontend

      # Build Frontend
      - name: Build the Frontend
        run: yarn build
        working-directory: ./frontend

  frontend-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Download + Start Redis Docker
      - name: Get Dump + Start Redis
        uses: ./.github/actions/start-redis
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          s3-bucket: ${{ vars.BUILD_S3_BUCKET }}

      # Yarn Install ./frontend
      - name: Yarn Install ./frontend
        uses: ./.github/actions/yarn-install
        with:
          working-directory: ./frontend

      # install playwrite npx playwright install chromium --with-deps
      - name: Install Playwright Dependencies
        run: npx playwright install chromium firefox --with-deps
        working-directory: ./frontend

      - name: Run Tests | Frontend
        run: yarn test
        working-directory: ./frontend

      - name: Upload Playwright Report
        if: always()
        id: upload-report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/output/report/

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          arch: amd64

      - name: Upload First Image to S3
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
        run: |
          # find the first png from frontend/output/report
          screenshot=$(find frontend/output/report -type f -name "*.png" | head -n 1)
          if [ -z "$screenshot" ]; then
            echo "No screenshot found in frontend/output/report"
            exit 1
          fi
          echo "Found screenshot: $screenshot"

          # Upload the screenshot to S3
          UPLOAD_PATH="run/${{ github.event.pull_request.number }}/${{ github.run.id }}/screens/main.png"
          echo "Uploading $screenshot to s3://${{ vars.CI_S3_BUCKET }}/$UPLOAD_PATH"
          aws s3 cp "$screenshot" "s3://${{ vars.CI_S3_BUCKET }}/$UPLOAD_PATH"

          # Upload playwright report to S3
          REPORT_PATH="run/${{ github.event.pull_request.number }}/${{ github.run.id }}/report"
          echo "Uploading frontend/output/report to s3://$CI_S3_BUCKET/$REPORT_PATH"
          aws s3 sync frontend/output/report "s3://$CI_S3_BUCKET/$REPORT_PATH"

          # Generate the URL for the artifacts
          echo "CI_BASE_URL=run/${{ github.event.pull_request.number }}/${{ github.run.id }}" >> $GITHUB_ENV

      # - name: Comment with screenshots
      #   if: github.event_name == 'pull_request'
      #   id: screenshot-path
      #   uses: actions/github-script@v7
      #   # env:
      #   #   ARTIFACT_URL: ${{ steps.upload-screenshots.outputs.artifact-url }}
      #   #   CI_AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
      #   #   CI_AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
      #   with:
      #     result-encoding: string
      #     script: |
      #       const url = process.env.ARTIFACT_URL;

      #       const fs = require('fs');
      #       const path = require('path');

      #       const reportDir = path.join(__dirname, 'frontend', 'output', 'report');
      #       const files = fs.readdirSync(reportDir);
      #       const screenshotFile = files.find(file => file.endsWith('.png'));
      #       if (!screenshotFile) {
      #         throw new Error('No screenshot found in the report directory');
      #       }

      #       const screenshotPath = path.join(reportDir, screenshotFile);
      #       return screenshotPath;

      # - name: Upload Screenshot to S3 CI Bucket
      #   if: always()
      #   id: upload-screenshots
      #   uses: aws-actions/s3-sync@v0.2.0
      #   with:
      #     bucket: ${{ vars.CI_S3_BUCKET }}
      #     source-dir: ${{ steps.screenshot-path.outputs.result }}
      #     destination-dir: playwright-screens/${{ github.event.pull_request.number }}/

      # - name: Generate Artifact URL
      #   id: generate-artifact-url
      #   run: |
      #     echo "ARTIFACT_URL=https://${{ vars.CI_S3_BUCKET }}.s3.amazonaws.com/playwright-results/${{ github.event.pull_request.number }}/" >> $GITHUB_ENV

      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "## Playwright Test Results"

      - name: Create/Update Comment
        env:
          HEAD_SHA: ${{ env.HEAD_SHA }}
          ARTIFACT_URL: ${{ steps.upload-screenshots.outputs.artifact-url }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: |-
            ## Playwright Test Results

            Playwright tests have been run against this pull request. You can find the results in the attached artifact.

            [Download Playwright Results](${{ steps.upload-results.outputs.artifact-url }})

            ![Screenshot](${{ env.CI_BASE_URL }}/screens/main.png)

            ![Playwright Report](${{ env.CI_BASE_URL }}/report/index.html)

          reactions: "+1"

  frontend-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Download + Start Redis Docker
      - name: Get Dump + Start Redis
        uses: ./.github/actions/start-redis
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          s3-bucket: ${{ vars.BUILD_S3_BUCKET }}

      # Yarn Install ./frontend
      - name: Yarn Install ./frontend
        uses: ./.github/actions/yarn-install
        with:
          working-directory: ./frontend

      # install playwrite npx playwright install chromium --with-deps
      - name: Install Playwright Dependencies
        run: npx playwright install chromium firefox --with-deps
        working-directory: ./frontend

      - name: Run Unit Tests | Frontend
        run: yarn test:unit
        working-directory: ./frontend
